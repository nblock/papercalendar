#!/usr/bin/python3

"""A simple paper calendar."""

import argparse
import datetime
import glob
import itertools
import locale
import logging
import os
import time

from reportlab.lib import colors
from reportlab.lib.pagesizes import A4
from reportlab.lib.units import cm
from reportlab.platypus import SimpleDocTemplate
from reportlab.platypus import Table
from reportlab.platypus import TableStyle
import caldav
import vobject


class EventCache:
    """Load events from a caldav server and cache them"""
    def __init__(self, url, username, password, calendar, dates):
        self._url = 'https://{}:{}@{}'.format(username, password, url)
        self._calendar = calendar
        self._dates = dates
        self._cache = self._initialize_cache()

    @property
    def cache(self):
        """Get the event cache."""
        return self._cache

    @staticmethod
    def datetime_from_utc_to_local(utc):
        epoch = time.mktime(utc.timetuple())
        offset = datetime.datetime.fromtimestamp (epoch) - \
            datetime.datetime.utcfromtimestamp (epoch)
        return utc + offset

    @staticmethod
    def datetime_as_time(datetime_obj):
        """Ensure a datetime.time object."""
        try:
            return datetime_obj.time()
        except AttributeError as ex:
            return datetime.time(0, 0, 0)

    def load_from_caldav(self):
        """Load events from a caldav server."""
        client = caldav.DAVClient(self._url)
        principal = client.principal()
        calendars = principal.calendars()

        # The calendar should be retrieved by name.
        calendar = [x for x in calendars if self._calendar in str(x.url)][0]
        for day in itertools.chain.from_iterable(self._dates):
            logging.debug('Load events for day: {}'.format(day))
            self._load_from_caldav_for_day(calendar, day)

    def _load_from_caldav_for_day(self, calendar, day):
        """Load caldav events for a single day."""
        dtstart = datetime.datetime.combine(day, datetime.time())
        dtend = dtstart + datetime.timedelta(days=1)
        for ev in calendar.date_search(dtstart, dtend):
            ical = vobject.readOne(ev.data)
            for event in ical.vevent_list:
                local_dtstart = self.datetime_from_utc_to_local(event.dtstart.value)
                local_dtend = self.datetime_from_utc_to_local(event.dtend.value)
                summary = event.summary.value
                try:
                    text = ': '.join((summary, event.description.value))
                except AttributeError:
                    text = summary
                dtstart_time = self.datetime_as_time(local_dtstart)
                dtend_time = self.datetime_as_time(local_dtend)
                logging.debug('Adding cache entry: {}: {} - {}'.format(
                    text, dtstart_time, dtend_time))
                self._cache[day].append((dtstart_time, dtend_time, text))

    def _initialize_cache(self):
        """Initialize the internal event cache."""
        cache = {}
        for date in itertools.chain.from_iterable(self._dates):
            cache[date] = []
        return cache


class Scheduler:
    """Schedule events."""

    def __init__(self, dates, event_cache, delta=datetime.timedelta(minutes=20)):
        self._dates = dates
        self._event_cache = event_cache
        self._delta=delta

    def schedule(self):
        """Schedule events."""
        content = []
        content.extend(self.build_table_content())
        content.insert(0, self.build_table_header())
        return content

    def build_table_header(self):
        """Build the table header."""
        none_dates = [None for _ in range(len(self._dates))]
        return list(itertools.chain.from_iterable(zip(none_dates, self._dates)))

    def build_table_content(self ):
        """Build the table content."""
        mon, tue, wed = self._dates

        # timeslots
        timeslots_mon = self.get_timeslots_mon(mon)
        timeslots_tue = self.get_timeslots_tue(tue)
        timeslots_wed = self.get_timeslots_wed(wed)

        # content
        content = []
        content.append(timeslots_mon)
        content.append(self.build_table_content_text(mon, timeslots_mon, self._event_cache[mon]))
        content.append(timeslots_tue)
        content.append(self.build_table_content_text(tue, timeslots_tue, self._event_cache[tue]))
        content.append(timeslots_wed)
        content.append(self.build_table_content_text(wed, timeslots_wed, self._event_cache[wed]))
        return zip(*content)

    def build_table_content_text(self, day, timeslots, event_cache_day):
        """Build the text column for a given time list."""
        result = [[] for _ in range(len(timeslots))]
        times = [datetime.datetime.combine(day, t) for t in timeslots]

        for start, end, summary in event_cache_day:
            dt_start = datetime.datetime.combine(day, start)
            dt_end = datetime.datetime.combine(day, end)
            index_start = self._find_closest_time_index(dt_start, times)
            num_slots = (dt_end - dt_start) // self._delta
            result[index_start].append(summary)

            for offset in range(1, num_slots):
                result[index_start+offset].append('|')

        return result

    def get_timeslots_mon(self, date):
        """Get the available timeslots for mondays."""
        result = []

        # before lunch
        begin = datetime.datetime.combine(date, datetime.time(10, 30))
        result.append(begin.time())

        begin += self._delta*2
        result.append(begin.time())

        begin += self._delta
        result.append(begin.time())

        # lunch
        begin = datetime.datetime.combine(date, datetime.time(12, 0))
        result.append(begin.time())

        # after lunch
        begin = datetime.datetime.combine(date, datetime.time(13, 0))
        end = datetime.datetime.combine(date, datetime.time(19, 20))
        while begin <= end:
            result.append(begin.time())
            begin += self._delta

        return result

    def get_timeslots_tue(self, date):
        """Get the available timeslots for tuesdays."""
        return self.get_timeslots_mon(date)

    def get_timeslots_wed(self, date):
        """Get the available timeslots for wednesdays."""
        result = []

        # before lunch
        begin = datetime.datetime.combine(date, datetime.time(8, 0))
        result.append(begin.time())

        begin += self._delta*2
        end = datetime.datetime.combine(date, datetime.time(11, 20))
        while begin <= end:
            result.append(begin.time())
            begin += self._delta

        # lunch
        begin = datetime.datetime.combine(date, datetime.time(12, 0))
        result.append(begin.time())

        # after lunch
        begin = datetime.datetime.combine(date, datetime.time(13, 0))
        end = datetime.datetime.combine(date, datetime.time(17, 0))
        while begin <= end:
            result.append(begin.time())
            begin += self._delta

        return result

    def _find_closest_time_index(self, time, slots):
        """Find the closest time index."""
        value = min(slots, key=lambda date: abs(time-date))
        return slots.index(value)


class Renderer:
    """Render table content to a pdf file."""

    # Format strings
    FMT_TABLE_HEADER = '%A, %d.%m.%Y (KW: %U)'
    FMT_TABLE_DATA_TIME = '%H:%M'

    def __init__(self, output_directory, dates, prefix='dates'):
        self._output = output_directory
        self._dates = dates
        self._prefix = prefix

    def render(self, content):
        """Render content as dodcument."""
        prepared = self.prepare(content)
        table = Table(
            prepared,
            colWidths=self.column_width_style(len(prepared[0])),
            rowHeights=self.row_heigth_style(len(prepared)))
        table.setStyle(self.table_style())

        doc = SimpleDocTemplate(
            self.filename(), topMargin=0, pagesize=A4,
            author="papercalendar", title=self.title())
        doc.build([table])

    def prepare(self, content):
        """Prepare the content for rendering."""
        result = []

        # Header
        header = content[0]
        result.append((
            header[0],
            header[1].strftime(self.FMT_TABLE_HEADER),
            header[2],
            header[3].strftime(self.FMT_TABLE_HEADER),
            header[4],
            header[5].strftime(self.FMT_TABLE_HEADER))
        )

        # Rows
        for row in content[1:]:
            result.append((
                row[0].strftime(self.FMT_TABLE_DATA_TIME),
                '\n'.join(row[1]),
                row[2].strftime(self.FMT_TABLE_DATA_TIME),
                '\n'.join(row[3]),
                row[4].strftime(self.FMT_TABLE_DATA_TIME),
                '\n'.join(row[5]))
            )

        return result

    def filename(self):
        """Build a document filename."""
        first, _, last = self._dates
        return os.path.join(
            self._output, '{}_{}_{}.pdf'.format(self._prefix,
                first.strftime('%Y-%m-%d'), last.strftime('%Y-%m-%d')))

    def title(self):
        """Build a document title."""
        first, _, last = self._dates
        return '{}: {} - {}'.format(
                self._prefix.title(),
                first.strftime('%d.%m.%Y'), last.strftime('%d.%m.%Y'))

    def column_width_style(self, num_columns):
        """Build the column widths: [time col width, text col width, â€¦]."""
        time_col_width = 1 * cm
        text_col_width = 5.8 * cm
        return list(itertools.chain.from_iterable(
            zip(num_columns // 2 * (time_col_width, text_col_width))))

    def row_heigth_style(self, num_rows):
        """Build the row heights."""
        result = [0.7*cm]
        result.extend((num_rows -1) * [cm])
        return result

    def table_style(self):
        """The default table style."""
        return TableStyle([
            ('FONT', (0, 0), (-1, -1), 'Helvetica'),
            ('FONT', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, -1), 8.5),
            ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),

            # Header
            ('ALIGN', (0, 0), (-1, 0), 'CENTER'),
            ('VALIGN', (0, 0), (-1, 0), 'MIDDLE'),

            # Content: timeslots
            ('ALIGN', (0, 1), (0, -1), 'CENTER'),
            ('VALIGN', (0, 1), (0, -1), 'MIDDLE'),
            ('ALIGN', (2, 1), (2, -1), 'CENTER'),
            ('VALIGN', (2, 1), (2, -1), 'MIDDLE'),
            ('ALIGN', (4, 1), (4, -1), 'CENTER'),
            ('VALIGN', (4, 1), (4, -1), 'MIDDLE'),

            # Content: text
            ('ALIGN', (1, 1), (1, -1), 'LEFT'),
            ('VALIGN', (1, 1), (1, -1), 'TOP'),
            ('ALIGN', (3, 1), (3, -1), 'LEFT'),
            ('VALIGN', (3, 1), (3, -1), 'TOP'),
            ('ALIGN', (5, 1), (5, -1), 'LEFT'),
            ('VALIGN', (5, 1), (5, -1), 'TOP'),

            # Lunch breaks
            ('BACKGROUND', (0, 4), (1, 4), colors.lightgrey),
            ('BACKGROUND', (2, 4), (3, 4), colors.lightgrey),
            ('BACKGROUND', (4, 11), (5, 11), colors.lightgrey),
        ])


def calculate_datetimes(week, year, count, relevant_days=3):
    """Calculate a list of revelant datetimes: [[dt1, dt2, dt3], â€¦]"""
    result = []
    day_delta = datetime.timedelta(days=1)
    week_delta = datetime.timedelta(weeks=1)
    initial_datetime = datetime.datetime.strptime('{}-{}-1'.format(year, week), '%Y-%U-%w')

    for week_offset in range(count):
        current_datetime = initial_datetime + week_offset * week_delta
        group = []
        for _ in range(relevant_days):
            group.append(current_datetime.date())
            current_datetime += day_delta
        result.append(group)
    return result


def parse_args():
    """Parse CLI arguments."""
    parser = argparse.ArgumentParser(description="A simple paper calendar")
    parser.add_argument(
        '-v', '--verbosity',
        choices=["DEBUG", "INFO", "WARNING", "ERROR", "CRITICAL"],
        default="DEBUG", help="the log verbosity level")
    parser.add_argument(
        '-l', '--locale', default="de_AT.UTF-8", help="the locale to use")
    parser.add_argument(
        '-y', '--year', default=datetime.date.today().year, type=int,
        help="the year to generate a calendar for")
    parser.add_argument(
        '-w', '--week', default=datetime.datetime.now().strftime('%W'), type=int,
        help="the ISO calendar week to start with")
    parser.add_argument(
        '-c', '--count', default=3, type=int,
        help="the number of weeks to generate a calendar for")
    parser.add_argument(
        '-u', '--url', required=True,
        help="the URL for the caldav server")
    parser.add_argument(
        '-n', '--calendar', required=True,
        help="the name of the calendar to query")
    parser.add_argument(
        '-U', '--username', required=True,
        help="the username for the caldav server")
    parser.add_argument(
        '-P', '--password', required=True,
        help="the password for the caldav server")
    parser.add_argument(
        '-o', '--output', default='.',
        help="the output directory to store generated calendar files")
    return parser.parse_args()


def main():
    """Main"""
    args = parse_args()
    logging.basicConfig(level=args.verbosity)
    locale.setlocale(locale.LC_ALL, args.locale)

    # Get a list of relevant dates.
    date_groups = calculate_datetimes(args.week, args.year, args.count)

    # Load ics files into cache.
    ec = EventCache(
        args.url, args.username, args.password, args.calendar, date_groups)
    ec.load_from_caldav()

    # Build documents.
    for dates in date_groups:
        content = Scheduler(dates, ec.cache).schedule()
        renderer = Renderer(args.output, dates, prefix='termine')
        renderer.render(content)


if __name__ == '__main__':
    main()

# vim: tabstop=4 expandtab shiftwidth=4 softtabstop=4 smartindent autoindent
